//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace EVENeT.EVENeTServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EVENeTServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UsernameExists", ReplyAction="http://tempuri.org/IService/UsernameExistsResponse")]
        System.Threading.Tasks.Task<bool> UsernameExistsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CorrectUserNameAndPassword", ReplyAction="http://tempuri.org/IService/CorrectUserNameAndPasswordResponse")]
        System.Threading.Tasks.Task<bool> CorrectUserNameAndPasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IndividualFullySetUp", ReplyAction="http://tempuri.org/IService/IndividualFullySetUpResponse")]
        System.Threading.Tasks.Task<bool> IndividualFullySetUpAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UserType", ReplyAction="http://tempuri.org/IService/UserTypeResponse")]
        System.Threading.Tasks.Task<int> UserTypeAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateIndividual", ReplyAction="http://tempuri.org/IService/CreateIndividualResponse")]
        System.Threading.Tasks.Task CreateIndividualAsync(string username, string password, string profilePic, string cover, string firstName, string midName, string lastName, System.DateTime dob, bool gender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateOrganization", ReplyAction="http://tempuri.org/IService/CreateOrganizationResponse")]
        System.Threading.Tasks.Task CreateOrganizationAsync(string username, string password, string logo, string cover, string description, string type, string phone, string website);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : EVENeT.EVENeTServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<EVENeT.EVENeTServiceReference.IService>, EVENeT.EVENeTServiceReference.IService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> UsernameExistsAsync(string username) {
            return base.Channel.UsernameExistsAsync(username);
        }
        
        public System.Threading.Tasks.Task<bool> CorrectUserNameAndPasswordAsync(string username, string password) {
            return base.Channel.CorrectUserNameAndPasswordAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> IndividualFullySetUpAsync(string username) {
            return base.Channel.IndividualFullySetUpAsync(username);
        }
        
        public System.Threading.Tasks.Task<int> UserTypeAsync(string username) {
            return base.Channel.UserTypeAsync(username);
        }
        
        public System.Threading.Tasks.Task CreateIndividualAsync(string username, string password, string profilePic, string cover, string firstName, string midName, string lastName, System.DateTime dob, bool gender) {
            return base.Channel.CreateIndividualAsync(username, password, profilePic, cover, firstName, midName, lastName, dob, gender);
        }
        
        public System.Threading.Tasks.Task CreateOrganizationAsync(string username, string password, string logo, string cover, string description, string type, string phone, string website) {
            return base.Channel.CreateOrganizationAsync(username, password, logo, cover, description, type, phone, website);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:24293/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService,
        }
    }
}
